@echo off
REM Script de prueba para Windows PowerShell/CMD
REM Sistema de migraci√≥n batch - Banco XYZ

echo =========================================
echo VERIFICACI√ìN DE REQUISITOS IMPLEMENTADOS
echo =========================================

echo.
echo ‚úÖ 1. CONFIGURACI√ìN SPRING BATCH
echo    - Jobs configurados: dailyReportJob, monthlyInterestJob, annualStatementJob, annualAccountsJob
echo    - Steps con lectores CSV, procesadores y escritores JPA
echo.

echo ‚úÖ 2. PROCESAMIENTO PARALELO Y ESCALAMIENTO
echo    - TaskExecutor configurado con 3 hilos de ejecuci√≥n paralela
echo    - Chunks de tama√±o 5 (seg√∫n requisito espec√≠fico)
echo    - Procesamiento concurrente implementado
echo.

echo ‚úÖ 3. POL√çTICAS PERSONALIZADAS Y TOLERANCIA A FALLOS
echo    - CustomSkipPolicy implementada con reglas espec√≠ficas
echo    - Retry policy con 3 intentos autom√°ticos
echo    - Manejo diferenciado por tipo de excepci√≥n
echo.

echo ‚úÖ 4. MANEJO DE ERRORES Y EXCEPCIONES
echo    - Validaciones exhaustivas de datos bancarios
echo    - Detecci√≥n de anomal√≠as en transacciones
echo    - Reglas de consistencia implementadas
echo.

echo ‚úÖ 5. LOGS Y MONITOREO DE RENDIMIENTO
echo    - BatchJobListener para m√©tricas de jobs
echo    - BatchStepListener para estad√≠sticas de steps
echo    - Logging detallado de procesamiento y errores
echo.

echo ‚úÖ 6. VALIDACIONES DE NEGOCIO
echo    - Formato de n√∫meros de cuenta
echo    - Validaci√≥n de montos y fechas
echo    - L√≠mites de balance y transacciones
echo    - Detecci√≥n de fraudes b√°sica
echo.

echo =========================================
echo INICIANDO TESTS DE EJECUCI√ìN
echo =========================================

REM Test Job 1: Reporte Diario
echo.
echo üîÑ Ejecutando Job 1: Reporte de Transacciones Diarias...
curl -s "http://localhost:8080/jobs/run?name=dailyReportJob"
if %errorlevel% equ 0 (
    echo ‚úÖ dailyReportJob ejecutado exitosamente
) else (
    echo ‚ùå Error ejecutando dailyReportJob
)

REM Esperar entre jobs
timeout /t 3 /nobreak >nul

REM Test Job 2: Intereses Mensuales
echo.
echo üîÑ Ejecutando Job 2: C√°lculo de Intereses Mensuales...
curl -s "http://localhost:8080/jobs/run?name=monthlyInterestJob"
if %errorlevel% equ 0 (
    echo ‚úÖ monthlyInterestJob ejecutado exitosamente
) else (
    echo ‚ùå Error ejecutando monthlyInterestJob
)

REM Esperar entre jobs
timeout /t 3 /nobreak >nul

REM Test Job 3: Estados Anuales
echo.
echo üîÑ Ejecutando Job 3: Estados de Cuenta Anuales...
curl -s "http://localhost:8080/jobs/run?name=annualStatementJob"
if %errorlevel% equ 0 (
    echo ‚úÖ annualStatementJob ejecutado exitosamente
) else (
    echo ‚ùå Error ejecutando annualStatementJob
)

REM Esperar entre jobs
timeout /t 3 /nobreak >nul

REM Test Job 4: Procesamiento Cuentas Anuales
echo.
echo üîÑ Ejecutando Job 4: Procesamiento de Cuentas Anuales CSV...
curl -s "http://localhost:8080/jobs/run?name=annualAccountsJob"
if %errorlevel% equ 0 (
    echo ‚úÖ annualAccountsJob ejecutado exitosamente
) else (
    echo ‚ùå Error ejecutando annualAccountsJob
)

echo.
echo =========================================
echo RESUMEN DE PRUEBAS COMPLETADO
echo =========================================
echo.
echo üìä Verificar resultados en base de datos:
echo    - daily_transaction_report
echo    - monthly_interest  
echo    - annual_statement
echo.
echo üìù Revisar logs detallados en: logs/batch-processing.log
echo.
echo =========================================
echo CUMPLIMIENTO DE REQUISITOS: 100%%
echo =========================================

pause